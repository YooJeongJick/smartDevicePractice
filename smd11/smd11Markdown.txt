목차
=
- Firebase
  - 정의
  - 설정

- 예제
  - LED
  - CDS
  - CLI

<br>
<br>

Firebase
=
정의
-
Firebase란 <u>모바일 및 웹 애플리케이션 개발을 지원하는   
일종의 서비스이며,</u> 구글이 이를 제공하고 있다.   

<br>

Firebase의 장점은 백엔드 부문을 구현한다는 것인데   
대표적인 기능으로는 **실시간 데이터베이스 제공**이 있다.   
또한 Firebase DB는 단순히 값을 저장할 뿐만 아니라   
**데이터 분석, 공유**와 같은 다양한 데이터 확장 기능을 제공한다.   

<br>

해당 예제에선 Firebase DB에 ESP32의 센서 값을 저장하여 활용해 볼 것이다.   

<br>
<br>

설정
-
예제 실행에 앞서, Firebase 프로젝트 생성이 필요한데,   
이를 위해 Firebase 공식 홈페이지에 접속해야 한다. (https://firebase.google.com/?hl=ko)    
프로젝트 추가 방법은 다음과 같다.   
![NKakaoTalk_20240518_171253027](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/5ac70704-b622-49ad-8ff1-fb4e4d7f28ea)   
![NKakaoTalk_20240518_171253027_01](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/97e718a3-97ce-4c58-80b0-d1332ebc82be)   
![NKakaoTalk_20240518_171253027_02](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/5ac37a87-758b-4a6f-b0d4-576515f553f8)   

<br>

프로젝트의 데이터베이스에도 추가적인 설정이 필요하다.   
이는 빌드 > Realtime Database 창 내에서 가능하며,   
구체적인 설정 방법은 다음과 같다.     
![NKakaoTalk_20240518_171253027_03](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/c72af931-2830-431c-bd05-b76732cc67de)   
![NKakaoTalk_20240518_171253027_04](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/201c3ab6-14c9-40cd-a4bb-a2b2d503c21c)   
![NKakaoTalk_20240518_171253027_05](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/4453c29f-e71b-4a8b-8afd-92296b4f1aee)   
![NKakaoTalk_20240518_171253027_06](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/2d894543-822c-4683-adc3-54263f0c9609)   

<br>

또한, 사용자 부분에서도 추가적인 설정이 필요하다.   
이는 빌드 → Authentication 창 내에서 가능하며,   
구체적인 설정 방법은 다음과 같다.     
![NKakaoTalk_20240518_171253027_07](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/477fdc44-dd12-4081-b926-b7ad33bbbf4f)   
![NKakaoTalk_20240518_171253027_08](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/b52192b9-10ea-4a3a-9dd5-97f3c91b35ed)   
![NKakaoTalk_20240518_171253027_09](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/321131b3-fe80-4d09-ae32-24c1adbe547d)   

<br>

마지막으로 Firebase ESP32 Client by Mobizt 라이브러리를 설치한다.      
해당 강의에서는 4.3.10 버전을 사용했다.   
![NKakaoTalk_20240518_174520977](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/51d5f239-8901-42a2-bee7-db4ba10909d2)      

<br>
<br>

예제
=
LED
-
LED 예제에서는 Firebase DB 편집을 통해   
ESP32 내장 LED 출력을 변경시킬 것이다.   
예제를 실행시키기 위한 코드는 다음과 같다.   
```
#include <WiFi.h>
#include <FirebaseESP32.h>

//Provide the token generation process info.
#include "addons/TokenHelper.h"
//Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Firebase 설정
#define FIREBASE_HOST "your_firebase_host"
#define FIREBASE_AUTH "your_firebase_auth"
#define WIFI_SSID "WEBSERVER"
#define WIFI_PASSWORD "20240403"

// 내장 LED 핀 설정
#define LED_PIN 2

// Firebase 객체 생성
FirebaseData firebaseData;

FirebaseAuth auth;
FirebaseConfig config;
bool signupOK = false;
unsigned long sendDataPrevMillis = 0;

void setup_wifi() {
  delay(10);
  // Wi-Fi 네트워크에 연결 시작
  Serial.println();
  Serial.print("연결 중인 Wi-Fi: ");
  Serial.println(WIFI_SSID);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("Wi-Fi 연결됨");
  Serial.println("IP 주소: ");
  Serial.println(WiFi.localIP());
}

void setup() {
  // 시리얼 통신 초기화
  Serial.begin(115200);

  // WiFi 연결
  setup_wifi();

  // API 키를 할당합니다.(필수)
  config.api_key = "API";

  //RTDB URL을 할당합니다.(필수)
  config.database_url = "https://esp32-led-24fc9-default-rtdb.firebaseio.com/";

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  // 긴 실행 시간이 필요한 토큰 생성 작업을 위한 콜백 함수를 할당합니다.
  config.token_status_callback = tokenStatusCallback; 

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  // 내장 LED 핀 설정
  pinMode(LED_PIN, OUTPUT);

  // "/ledState" 경로를 0으로 초기화
  if (Firebase.ready() && signupOK)
  {
    if (Firebase.RTDB.setInt(&firebaseData, "/ledState", 0)){
      Serial.println("PASSED");
      Serial.println("PATH: " + firebaseData.dataPath());
      Serial.println("TYPE: " + firebaseData.dataType());
    }
    else {
      Serial.println("FAILED");
      Serial.println("REASON: " + firebaseData.errorReason());
    }
  }
}
void loop() {
  // Firebase.ready() 함수는 인증 작업을 처리하기 위해 반복적으로 호출되어야 합니다.
  if (Firebase.ready() && signupOK && \
  (millis() - sendDataPrevMillis > 2000 || sendDataPrevMillis == 0))
  {
    sendDataPrevMillis = millis();

    // Firebase에서 LED 상태 가져오기
    int ledState = 0;
    if (Firebase.RTDB.getInt(&firebaseData, "/ledState")) {
      if (firebaseData.dataType() == "int") {
        ledState = firebaseData.intData();
        Serial.println(ledState);
        if (ledState == 1) {
          digitalWrite(LED_PIN, HIGH);
        } else {
          digitalWrite(LED_PIN, LOW);
        }
      }
    }
    else {
        Serial.println(firebaseData.errorReason());
    }
  }
}
```

<br>

앞선 코드 내에선 인터넷과 Firebase 설정이 필수적이며,      
인터넷 설정은 지난 예제와 동일하다.         
[Week5_ESP32WebServer1](https://github.com/YooJeongJick/smartDevicePractice_2024/wiki/Week05_ESP32WebServer1) (예제 > 기본)   
```
#define WIFI_SSID "WEBSERVER"
#define WIFI_PASSWORD "20240403"
```

<br>

Firebase 설정값을 확인하고 적용시키는 방법은 다음과 같다.   
![NKakaoTalk_20240518_174520977_02](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/d76729c2-1f6a-47a5-b42d-4f5f888db0c0)   
![NKakaoTalk_20240518_174520977_03](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/99ed9c5a-662a-455a-b771-ae6236ac9259)   
![NKakaoTalk_20240518_174520977_01](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/85127e24-87c1-4333-aadb-a1e4d24e09c5)   
```
  // API 키를 할당합니다.(필수)
  config.api_key = "API";

  //RTDB URL을 할당합니다.(필수)
  config.database_url = "https://esp32-led-24fc9-default-rtdb.firebaseio.com/";
```

<br>

이에 대한 실행 결과는 다음과 같으며,   
Firebase 내에 ledState 값을 변경시킴으로써   
내장 LED 출력을 조정할 수 있다.      
![NKakaoTalk_20240518_174520977_04](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/33335ba0-f434-4546-bf9e-e8c1967bba9a)   
![NKakaoTalk_20240518_174520977_05](https://github.com/YooJeongJick/smartDevicePractice_2024/assets/145202997/e247d9e5-0418-4023-bdf9-cfaafe92514b)   

<br>
<br>

CDS
-